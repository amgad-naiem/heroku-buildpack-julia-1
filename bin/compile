#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

PROFILE_PATH=".profile.d/julia.sh"

set-env() {
  echo "export $1=$2" >> $PROFILE_PATH
}

# parse args
BUILD_DIR=$1
CACHE_DIR=$2

BP_DIR=`cd $(dirname $0); cd ..; pwd`

function error() {
  echo " !     $*" >&2
  exit 1
}

function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"

mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"

APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"

topic "Updating apt caches"
apt-get $APT_OPTIONS update | indent

for PACKAGE in $(cat $BUILD_DIR/Aptfile); do
  if [[ $PACKAGE == *deb ]]; then
    PACKAGE_NAME=$(basename $PACKAGE .deb)
    PACKAGE_FILE=$APT_CACHE_DIR/archives/$PACKAGE_NAME.deb

    topic "Fetching $PACKAGE"
    curl -s -L -z $PACKAGE_FILE -o $PACKAGE_FILE $PACKAGE 2>&1 | indent
  else
    topic "Fetching .debs for $PACKAGE"
    apt-get $APT_OPTIONS -y --force-yes -d install --reinstall $PACKAGE | indent
  fi
done

mkdir -p $BUILD_DIR/.apt

for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
  topic "Installing $(basename $DEB)"
  dpkg -x $DEB $BUILD_DIR/.apt/
done

topic "Writing profile script"
mkdir -p $BUILD_DIR/.profile.d
cat <<EOF >$BUILD_DIR/.profile.d/000_apt.sh
export PATH="\$HOME/.apt/usr/bin:\$PATH"
export LD_LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LD_LIBRARY_PATH"
export LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LIBRARY_PATH"
export INCLUDE_PATH="\$HOME/.apt/usr/include:\$INCLUDE_PATH"
export CPATH="\$INCLUDE_PATH"
export CPPPATH="\$INCLUDE_PATH"
export PKG_CONFIG_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/i386-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/pkgconfig:\$PKG_CONFIG_PATH"
EOF

export PATH="$BUILD_DIR/.apt/usr/bin:$PATH"
export LD_LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$LD_LIBRARY_PATH"
export LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$LIBRARY_PATH"
export INCLUDE_PATH="$BUILD_DIR/.apt/usr/include:$INCLUDE_PATH"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"
export PKG_CONFIG_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/pkgconfig:$PKG_CONFIG_PATH"

#give environment to later buildpacks
export | grep -E -e ' (PATH|LD_LIBRARY_PATH|LIBRARY_PATH|INCLUDE_PATH|CPATH|CPPPATH|PKG_CONFIG_PATH)='  > "$LP_DIR/export"




cd ${BUILD_DIR}

echo -n "-----> Installing julia ...."

deps="https://julialang.s3.amazonaws.com/bin/linux/x64/0.5/julia-0.5.0-linux-x86_64.tar.gz"


cd $HOME
rm -rf julia
mkdir julia
cd julia

for dep in $deps; do
  depb=$(basename $dep)
  echo "        - $depb"
  curl -LO $dep
  tar -xzf $depb
done

cd $HOME


set-env PATH '$HOME/julia/julia-3c9d75391c/bin:$PATH'
set-env LIBRARY_PATH '$HOME/julia/julia-3c9d75391c/lib:$HOME/julia/julia-3c9d75391c/lib/x86_64-linux-gnu:$LIBRARY_PATH'
set-env LD_LIBRARY_PATH '$HOME/julia/julia-3c9d75391c/lib:$HOME/julia/julia-3c9d75391c/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH'

export LD_LIBRARY_PATH=./julia/julia-3c9d75391c/lib:./julia/julia-3c9d75391c/lib/x86_64-linux-gnu
export PATH=./julia/julia-3c9d75391c/bin:$PATH
LD_LIBRARY_PATH=./julia/julia-3c9d75391c/lib:./julia/julia-3c9d75391c/lib/x86_64-linux-gnu
PATH=./julia/julia-3c9d75391c/bin:$PATH
echo $PATH

# dep="https://github.com/JuliaLang/julia/releases/download/v0.3.7/julia-0.3.7_cb9bcae93a.tar.gz"
# depb=$(basename $dep)
# echo "        - $depb"
# curl -LO $dep
# tar -zxf $depb
# cd julia
# make

echo " done"

if [ "${PIPESTATUS[*]}" != "0" ]; then
  echo " !     Failed to install ${JULIA_DIST}"
  exit 1
fi

# these are not presistent in heroku
julia -e "Pkg.update()"
while IFS='' read -r julia_dep || [[ -n "$julia_dep" ]]; do
  if [[ $julia_dep == git* ]]; then
    echo 'in clone'
    julia -e "Pkg.clone(\"$julia_dep\")"
  else
    array=( $julia_dep )
    if [[ ${#array[@]} > 1 ]]; then
        julia -e "Pkg.add(\"${array[0]}\")"
        julia -e "Pkg.pin(\"${array[0]}\",v\"${array[1]}\")"
    else
        julia -e "Pkg.add(\"$julia_dep\")"
    fi
  fi

done < "${BUILD_DIR}/REQUIRE"

cp -r ~/.julia ${BUILD_DIR}/.julia
